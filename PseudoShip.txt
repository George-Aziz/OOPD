/*****************************************************************************
*  Author: George Aziz
*  Date Created: 20/05/2019
*  Date Last Modified: 26/05/2019
*  Purpose: Parent class of submarine and fighter jet. Contains all class fields 
			common in both child classes
******************************************************************************/

ABSTRACT CLASS Ship

	CLASS FIELDS: serialNum (String)
				  comYear (Integer)
				  shipEngine (Engine)

	CONSTRUCTORS:    
	Default: 
		IMPORT: none
		EXPORT: address of new Ship object
		ASSERTION: address of new Ship object
		ALGORITHM:  serialNum := "123.456"
					comYear := 2019
					CONSTRUCT shipEngine USING default

	Alternate:
		IMPORT: inSerialNum (String) , inComYear (Integer) , inEngine (Engine)
		EXPORT: address of new Ship object
		ASSERTION: Creates the object if the imports are valid and FAILS otherwise
		ALGORITHM:    
					IF inSerialNum is Null OR validateSerialNum <- inSerialNum is FALSE THEN
						FAIL <- "Invalid Serial Number"
					END IF

					IF validateComYear <- inComYear is FALSE THEN
						FAIL <- "Invalid Commission Year"
					END IF 

					IF inEngine is Null THEN
						FAIL <- "Invalid Engine"
					END IF

					serialNum := inSerialNum
					comYear := inComYear
					CONSTRUCT shipEngine USING inEngine


	Copy:
		IMPORT: inShip (Ship)
		EXPORT: address of new Ship object
		ASSERTION: Creates an object with an identical object state as the import.
		ALGORITHM:  serialNum := inShip.getSerialNum <- none
					comYear := inShip.getComYear <- none
					shipEngine := inShip.getEngine <- none

	SUBMODULE: clone
	IMPORT: none
	EXPORT: Ship
	ASSERTION: construct a new Engine object which is a copy of this object
	ALGORITHM:
		CONSTRUCT Ship using this
	END SUBMODULE


	ACCESSORS:    
	SUBMODULE: getSerialnum
	IMPORT: none
	EXPORT: serialNum
	END SUBMDOULE

	SUBMODULE: getComYear
	IMPORT: none
	EXPORT: comYear
	END SUBMODULE

	SUBMODULE: getEngine
	IMPORT: none
	Export: shipEngine (Engine)
	END SUBMODULE

	SUBMODULE: equals
	IMPORT: inObj (Submarine)
	EXPORT: isEqual (boolean)
	ASSERTION: If all class fields are equal between ships, they are interchangeable
	ALGORITHM: 
		isEqual (boolean) := FALSE
		IF (shipObj IS A Ship) THEN
			inShip := (Convert to Ship)shipObj
			isEqual := (serialNum EQUALS inShip.getSerialNum <- none) AND (comYear EQUALS inShip.getComYear <- none) AND (shpEngine EQUALS inShip.getEngine <- none)
		ENDIF
	END SUBMODULE

	SUBMODULE: toString
	IMPORT: none
	EXPORT: str (String)
	ALGORITHM: 
		str (String) := serialNum + " was comissioned in " + comYear + shipEngine.toString <- none
	END SUBMODULE


	ABSTRACT SUBMODULE: toFileString
	IMPORT: none
	EXPORT: str (String)

	ABSTRACT SUBMODULE: toDistanceString
	IMPORT: none
	EXPORT: str (String)


	MUTATORS:
	SUBMODULE: setSerialNum
	IMPORT: inSerialNum (String)
	EXPORT: none
	ASSERTION: sets the serialNum if valid and it fails otherwise
	ALGORITHM: 
		IF (validateSerialNum <- inSerialNum) THEN
			serialNum := inSerialNum
	   ELSE
		   FAIL <- "Invalid Serial Number"
	   END IF
	END SUBMODULE

	SUBMODULE: setComYear
	IMPORT: inComYear (String)
	EXPORT: none
	ASSERTION: sets the comYear if valid and it fails otherwise
	ALGORITHM: 
		IF (validateMaxDepth <- inMaxDepth) THEN
			maxDepth := inMaxDepth
	   ELSE
		   FAIL
	   END IF
	END SUBMODULE 

	SUBMODULE: setEngine
	IMPORT: inEngine (Engine)
	EXPORT: none
	ASSERTION: sets the Engine object if valid and it fails otherwise
	ALGORITHM: 
		IF (inEngine != Null) THEN
			CONSTRUCT shipEngine USING inEngine
	   ELSE
		   FAIL <- "Invalid engine details"
	   END IF
	END SUBMODULE

	ABSTRACT SUBMODULE: calcTravel
	IMPORTT: distance (Integer)
	EXPORT: travelTime (Real)


	VALIDATION SUBMODULES:
	SUBMODULE: validateSerialNum
	IMPORT: inSerialNum (String)
	EXPORT: valid (boolean)
	ASSERTION: Serial Number is in the correct format (inclusive)
	ALGORITHM: 
		validation (Boolean) := false
		section(ARRAY OF Strings) := inSerialNum.split <- "\\."

		TRY
			IF (section.length == 2) THEN

				XXX (String) := section[0]
				YYY (String) := section[1]  

				intXXX (Integer) := (Convert to integer) XXX
				intYYY (Integer) := (Convert to integer) YYY


				IF ((XXX.length <- none == 3) AND (YYY.length <- none == 3) AND (intXXX >= 100) AND (intXXX <= 300) AND (intYYY >= 001) AND (intYYY <= 999)) THEN

					validation := true
		CATCH
			validation := false
	END SUBMODULE


	SUBMODULE: validateComYear
	IMPORT: inComYear (integer)
	EXPORT: valid (boolean)
	ASSERTION: Commision Year is between 1950 and 2022 (inclusive)
	ALGORITHM: 
		valid := ((inComYear >= 1950) AND (inComYear <= 2022))
	END SUBMODULE
END CLASS


